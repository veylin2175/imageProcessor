// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "imageProcessor/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ImageSaver is an autogenerated mock type for the ImageSaver type
type ImageSaver struct {
	mock.Mock
}

// SaveImage provides a mock function with given fields: ctx, filename, originalPath
func (_m *ImageSaver) SaveImage(ctx context.Context, filename string, originalPath string) (*models.Image, error) {
	ret := _m.Called(ctx, filename, originalPath)

	if len(ret) == 0 {
		panic("no return value specified for SaveImage")
	}

	var r0 *models.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Image, error)); ok {
		return rf(ctx, filename, originalPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Image); ok {
		r0 = rf(ctx, filename, originalPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, filename, originalPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageSaver creates a new instance of ImageSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageSaver {
	mock := &ImageSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
